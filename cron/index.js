const schedule = require('node-schedule')
const Room = require('../models/Room')
const User = require("../models/User");

const chooseWinners = async () => {

    const rooms = await Room.find({status: 'WAITING'})
    if (!rooms) return
    //–ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–æ–º–Ω–∞—Ç–∞–º —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º WAITING
    await Promise.all(
        rooms.map(async room => {
            //–µ—Å–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
            if (!room.participants.length) return
            //–µ—Å–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ –º–µ–Ω—å—à–µ 4 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if (room.participants.length <= 2) {
                await Promise.all(room.participants.map(async item => await bot.telegram.sendMessage(item.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ, —Ä–æ–∑—ã–≥—Ä—ã—à –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ 5% —Å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')))
                return
            }
            //—Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–≤–∏ –≤—Å–µ—Ö –±–∏–ª–µ—Ç–æ–≤
            const tickets = []
            for (const participant of room.participants) {
                for (let i = 0; i < participant.tickets; i++) {
                    tickets.push(participant.id)
                }
            }

            //—Å—á–∏—Ç–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –æ–¥–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            const reward = Math.floor((tickets.length * room.price / 100) * (100 - room.commission) / Math.floor(room.participants.length / room.win_seats))

            //–ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –±–∏–ª–µ—Ç–æ–≤
            const mixed = tickets.sort(() => Math.random() - 0.5);

            for (let i = 0; i < Math.floor(room.participants.length / room.win_seats); i++) {
                //–∏—â–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                let random = Math.floor(Math.random() * mixed.length)
                let winner = await User.findOne({id: mixed[random]})
                // console.log({winner})

                //–Ω–∞—á–∏—Å–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –±–∞–ª–∞–Ω—Å
                await User.findByIdAndUpdate(winner._id, {$inc: {balance: +reward}})
                //–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –º–∞—Å—Å–∏–≤ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∫–æ–º–Ω–∞—Ç—ã
                await Room.findByIdAndUpdate(room._id, {$push: {winners: {id: +winner.id, username: winner.username}}})
            }
            await Room.findByIdAndUpdate(room._id, {status: 'Finished'})
            await Room.create({created_at: Date.now(), price: room.price, commission: room.commission})
            const updatedRoom = await Room.findById(room._id)
            console.log({updatedRoom})
            await Promise.all(
                updatedRoom.participants.map(async participant => {
                    await bot.telegram.sendMessage(participant.id, `
üéâ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!

ü•á –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${updatedRoom.winners.map(item => `\n     ü•á ${item.username.slice(0, -2)}**`)}

üí∞ –°—É–º–º–∞ –≤—ã–∏–≥—ã—à–∞ –∫–∞–∂–¥–æ–≥–æ: ${reward} —Ä—É–±.
üëõ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –±–∞–ª–∞–Ω—Å`)
                })
            )
        })
    )

    // console.log('cron')
}


module.exports = async () => {
    console.log('cron started')
    await schedule.scheduleJob('0 0 13 * * *', chooseWinners);
}